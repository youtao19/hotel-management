# 后端开发规范

## 1. 引言

本文档旨在为后端开发团队提供一套统一的开发规范和最佳实践，以提高代码质量、可维护性、可扩展性，并促进团队成员之间的有效协作。所有后端开发人员应遵循本文档中列出的规范。

## 2. 技术栈

-   **编程语言**: JavaScript (ES6+ 规范)
-   **框架**: Express.js
-   **数据库**: PostgreSQL
-   **包管理工具**: npm

## 3. 通用原则

-   **代码清晰性**: 代码应易于阅读和理解。使用有意义的变量名、函数名。
-   **单一职责原则 (SRP)**: 每个模块、类或函数应该只负责一项任务。
-   **DRY (Don't Repeat Yourself)**: 避免重复代码，尽可能复用。
-   **KISS (Keep It Simple, Stupid)**: 保持设计和实现的简单性。
-   **错误处理**: 对潜在的错误进行妥善处理，向用户或调用方返回明确的错误信息。
-   **数据一致性**: 在处理数据时，尤其是有 bug 的数据，需要考虑其关联影响，进行整体处理，确保数据的一致性和准确性。例如，当某个房间数据出现问题时，需要检查并修正所有与该房间相关的订单、状态等信息。

## 4. 项目结构

后端代码统一存放在项目根目录下的 `/backend` 文件夹中。建议采用以下或类似的模块化结构：

```
/backend
├── src
│   ├── config        # 配置文件 (数据库连接、环境变量等)
│   ├── controllers   # 控制器 (处理HTTP请求，调用服务)
│   ├── middlewares   # 中间件 (请求认证、日志记录、错误处理等)
│   ├── models        # 数据模型 (数据库表结构定义，如使用ORM)
│   ├── routes        # 路由定义
│   ├── services      # 业务逻辑服务
│   ├── utils         # 工具函数
│   └── app.js        # Express 应用主文件
├── tests             # 测试文件
│   ├── unit          # 单元测试
│   └── integration   # 集成测试
├── package.json
└── ...
```

## 5. 代码风格与格式化

-   **编码规范**: 遵循 Airbnb JavaScript Style Guide 或 Google JavaScript Style Guide，团队内部统一标准。
-   **代码格式化**: 使用 Prettier 配合 ESLint 进行代码自动格式化和风格检查。
    -   确保在项目根目录配置 `.eslintrc.js` 和 `.prettierrc.js`。
    -   提交代码前必须通过 ESLint 检查。
-   **命名规范**:
    -   变量、函数名：驼峰命名法 (camelCase)，例如 `userName`, `calculateTotalAmount`。
    -   常量名：全大写，下划线分隔 (UPPER_SNAKE_CASE)，例如 `MAX_USERS`。
    -   类名、构造函数：帕斯卡命名法 (PascalCase)，例如 `UserService`, `OrderController`。
    -   文件名：通常使用小写字母，单词间用 `-` 或 `_` 分隔（团队统一），例如 `user-controller.js` 或 `user_service.js`。
-   **注释**:
    -   对复杂的逻辑、重要的决策点或不直观的代码段添加注释。
    -   使用 JSDoc 为函数、类和模块提供文档注释。
    -   避免不必要的注释，代码本身应具备良好的自解释性。

## 6. API 设计

-   **RESTful 风格**:
    -   使用名词表示资源路径 (e.g., `/users`, `/orders`)。
    -   使用 HTTP 方法表达操作:
        -   `GET`: 读取资源
        -   `POST`: 创建资源
-   **URL 规范**:
    -   路径使用小写字母，单词间用连字符 `-` 分隔。
    -   参数使用驼峰命名法。
    -   示例: `/api/v1/users/{userId}/orders`
-   **版本控制**: 在 API 路径中包含版本号，例如 `/api/v1/`。
-   **请求与响应**:
    -   请求体和响应体统一使用 JSON 格式。
    -   设置 `Content-Type: application/json`。
    -   **成功响应 (2xx)**:
        -   `GET`, `PUT`, `PATCH`: 返回 `200 OK` 和资源数据。
        -   `POST`: 返回 `201 Created` 和新创建的资源数据，或仅 `204 No Content` 如果不返回资源。
        -   `DELETE`: 返回 `204 No Content`。
    -   **错误响应 (4xx, 5xx)**:
        -   返回统一的错误结构，例如:
            ```json
            {
              "error": {
                "code": "INVALID_INPUT",
                "message": "The 'email' field is required.",
                "details": [ /* 可选，更详细的错误信息 */ ]
              }
            }
            ```
        -   使用恰当的 HTTP 状态码：
            -   `400 Bad Request`: 客户端请求无效 (参数错误、格式错误)。
            -   `401 Unauthorized`: 未认证。
            -   `403 Forbidden`: 已认证，但无权限访问。
            -   `404 Not Found`: 资源不存在。
            -   `409 Conflict`: 资源冲突 (例如，尝试创建已存在的唯一资源)。
            -   `422 Unprocessable Entity`: 请求格式正确，但语义错误。
            -   `500 Internal Server Error`: 服务器内部错误。
-   **数据校验**:
    -   在 Controller 层对所有外部输入 (请求参数、请求体) 进行严格校验。
    -   使用 `express-validator` 或类似库进行校验。

## 7. 数据库操作 (PostgreSQL)

-   **连接管理**:
    -   使用连接池 (`pg-pool` 或 ORM 内置连接池) 管理数据库连接。
    -   数据库配置 (host, port, user, password, database) 通过环境变量管理，不硬编码在代码中。(`host: localhost`, `port: 5432`, `user: postgres`, `password: 1219`)
-   **查询**:
    -   优先使用参数化查询或 ORM/查询构建器提供的机制，以防止 SQL 注入。
    -   避免使用 `SELECT *`，明确指定所需字段。
    -   复杂查询应进行性能分析和优化。
-   **事务管理**:
    -   对于涉及多个写操作的业务逻辑，必须使用数据库事务来保证操作的原子性。
-   **数据模型**:
    -   如使用 ORM (如 Sequelize, TypeORM)，需定义清晰的数据模型。
    -   **订单状态 (Order Status)**: 严格按照定义的状态进行管理：`待入住`, `已入住`, `已退房`, `已取消`。状态转换逻辑需清晰定义在服务层。
    -   **房间表 (Room Table)**:
        -   `is_closed` 字段:
            -   当房间状态为 `cleaning` 或 `repair` 时，`is_closed` 应设为 `True`。
            -   当房间状态为 `available` 时，`is_closed` 通常应为 `False` (注意这里与规则中 "available 将is_closed 改为 True" 的潜在冲突，需确认业务逻辑，通常 available 意味着 is_closed=false)。
            -   **重要**: 根据 "与订单表进行绑定，可以查看入住时间退房时间和客人信息" 规则，确保房间状态的更新与订单信息同步，并能正确反映房间的实际可用性。当房间与有效订单绑定（如"待入住"、"已入住"）时，即使其物理状态不是 cleaning/repair，也应被视为不可用（`is_closed` 或通过其他逻辑判断）。
-   **数据库迁移**:
    -   使用迁移工具 (如 `node-pg-migrate`, `Knex migrations`) 管理数据库模式的变更。
    -   迁移脚本应纳入版本控制。

## 8. 状态管理 (后端)

-   后端服务通常是无状态的。用户会话状态可以通过 JWT (JSON Web Tokens) 或其他 token 机制管理。
-   需要缓存的数据（如配置信息、热门数据）可以使用 Redis 或类似内存数据库。

## 9. 错误处理

-   **统一错误处理中间件**: 在 Express 应用中设置一个全局错误处理中间件，捕获所有未处理的错误。
-   **自定义错误类**: 可以创建自定义错误类 (继承自 `Error`) 来区分不同类型的业务错误和系统错误。
-   **错误日志**: 详细记录错误信息，包括错误堆栈、请求上下文等，便于排查。
-   **不暴露敏感信息**: 不向客户端暴露详细的系统错误信息或堆栈跟踪。

## 10. 安全性

-   **输入验证**: 严格验证所有用户输入，防止 XSS, SQL 注入等攻击。
-   **身份认证**: 使用强密码策略，采用 JWT 或其他安全的 token 机制进行用户认证。Token 应设置合理的过期时间。
-   **授权**: 实现基于角色的访问控制 (RBAC) 或其他权限管理机制，确保用户只能访问其被授权的资源和操作。
-   **密码存储**: 用户密码必须使用强哈希算法 (如 bcrypt, Argon2) 加盐存储，不可明文存储。
-   **依赖安全**:
    -   定期使用 `npm audit` 检查并修复已知的安全漏洞。
    -   谨慎引入新的第三方依赖，评估其安全性。
-   **HTTPS**: 生产环境必须使用 HTTPS。
-   **敏感数据**: 避免在日志中记录密码、API 密钥等敏感信息。
-   **CORS**: 正确配置跨域资源共享 (CORS)策略。

## 11. 异步编程

-   优先使用 `async/await` 处理异步操作，使代码更易读和维护。
-   正确处理 Promise 的 `reject` 情况，避免未捕获的 Promise 拒绝。

## 12. 测试

-   **单元测试**:
    -   针对 Service 层的业务逻辑、工具函数、独立模块编写单元测试。
    -   使用 Jest, Mocha, Chai 等测试框架。
    -   Mock 外部依赖 (如数据库、第三方服务)。
-   **集成测试**:
    -   测试 API 端点，验证请求处理、业务逻辑、数据库交互的整体流程。
    -   可以针对真实数据库或测试数据库进行。
-   **测试覆盖率**: 追求较高的测试覆盖率，但更注重测试质量和关键路径的覆盖。
-   **测试命名**: 测试文件名和描述应清晰表达测试内容。

## 13. 日志记录

-   **日志库**: 使用成熟的日志库，如 Winston 或 Pino。
-   **日志级别**:
    -   `ERROR`: 严重错误，影响系统正常运行。
    -   `WARN`: 警告信息，潜在问题或非严重错误。
    -   `INFO`: 常规信息，记录系统运行状态、重要业务操作。
    -   `DEBUG`: 调试信息，仅在开发或故障排查时开启。
-   **日志格式**:
    -   推荐使用结构化日志 (如 JSON 格式)，方便机器解析和分析。
    -   日志内容应包含时间戳、日志级别、消息、上下文信息 (如请求 ID, 用户 ID)。
-   **日志输出**: 开发环境可输出到控制台，生产环境输出到文件或集中的日志管理系统 (如 ELK Stack, Splunk)。
-   **避免记录敏感信息**: 不要在日志中记录密码、Token 等敏感数据。

## 14. 版本控制 (Git)

-   **分支策略**:
    -   `main` (或 `master`): 稳定的生产环境代码。只接受来自 `develop` 或 Hotfix 分支的合并。
    -   `develop`: 开发分支，集成了所有已完成的功能。新功能分支从此分支创建。
    -   `feature/xxx`: 功能开发分支，命名清晰，例如 `feature/user-authentication`。
    -   `release/vx.x.x`: 发布分支，用于准备发布版本，进行测试和修复 bug。
    -   `hotfix/xxx`: 紧急修复线上 bug 的分支，直接从 `main` 创建，修复后合并回 `main` 和 `develop`。
-   **Commit Message**:
    -   遵循 Conventional Commits 规范 (https://www.conventionalcommits.org/)。
    -   示例: `feat: add user registration endpoint`
               `fix: correct calculation error in order total`
               `docs: update API documentation for user resource`
-   **Code Review**:
    -   所有代码变更 (尤其是合并到 `develop` 或 `main`) 必须经过至少一名其他团队成员的 Code Review。
    -   Reviewer 关注代码质量、逻辑正确性、规范遵守情况、潜在风险等。
-   **Pull Request**: 使用 Pull Request (或 Merge Request) 进行代码合并，PR 描述应清晰说明变更内容和原因。

## 15. 依赖管理

-   使用 `package.json` 和 `package-lock.json` (或 `yarn.lock`) 管理项目依赖。
-   定期更新依赖到最新稳定版本，特别是安全补丁。
-   在添加新依赖前，评估其必要性、社区活跃度、维护情况和安全性。

## 16. 文档

-   **API 文档**:
    -   使用 OpenAPI (Swagger) 规范编写和维护 API 文档。
    -   文档应与代码同步更新。
    -   可以使用工具自动生成 API 文档框架。
-   **项目文档**:
    -   `README.md`: 包含项目简介、安装步骤、启动命令、环境变量说明、项目结构等。
    -   架构设计文档、重要业务流程说明等，根据需要编写。
-   **代码注释**: 见"代码风格与格式化"中的注释部分。

## 17. 持续集成/持续部署 (CI/CD) - 可选，推荐

-   考虑引入 CI/CD 工具 (如 Jenkins, GitLab CI, GitHub Actions) 实现自动化构建、测试和部署。

## 18. 性能

-   **数据库优化**: 优化慢查询，合理使用索引。
-   **代码优化**: 识别并优化性能瓶颈代码段。
-   **缓存**: 对频繁访问且不经常变化的数据使用缓存 (如 Redis)。
-   **异步处理**: 对耗时操作使用异步处理，避免阻塞主线程。

---

本文档将根据项目发展和团队实践持续更新。 